<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>惊艳时光与温暖岁月</title>
  
  <subtitle>Puting thoughts and actions in to one.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-22T08:37:49.606Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>夏伊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python无厘头学习</title>
    <link href="http://yoursite.com/2018/04/22/Python%E6%97%A0%E5%8E%98%E5%A4%B4%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/04/22/Python无厘头学习/</id>
    <published>2018-04-22T08:36:10.000Z</published>
    <updated>2018-04-22T08:37:49.606Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="python学习">Python学习</span></h1><p>结束了Pygame的学习,紧接着学习的Python视屏当中有6个静音了,所以就得自己写下学习的步骤了.┭┮﹏┭┮<br><a id="more"></a></p><h2><span id="导入模块的路径设置">导入模块的路径设置</span></h2><h3><span id="热身">热身</span></h3><p><a href="https://www.cnblogs.com/wooya/p/6495222.html" target="_blank" rel="noopener">Python模块的认识</a></p><p>这是我在网上看到对python模块的基本描述,比较详细的,所以大家可以点进去看一看,当然<a href="https://docs.python.org/3/tutorial/modules.html" target="_blank" rel="noopener">官方文档</a>大家也可以看看,不过是英文,用Google浏览器,勉强翻译看看吧!其实个人感觉没有网友写得清楚,哈哈O(∩_∩)O哈哈~</p><p>这下面是我搬运第一个网友链接的,觉得这些特别好,补充了我的一些基本认识.</p><ul><li><p>import本质：</p><p>  导入模块的本质就是把Python文件解释一遍。</p><p>  导入包的本质就是执行该包下的<strong>init</strong>.py文件。</p></li><li><p>搜索模块路径:</p><pre><code>import sysfor item in sys.path:    print(item)</code></pre></li><li><p>输出当前脚本目录</p><pre><code>import osos.getcwd()  # 获取当前目录</code></pre></li><li><p>import 如何工作</p><p>  导入其实是运行时的运算，程序第一次导入指定文件时，会执行三个步骤：    </p></li></ul><p>　　        a、找到模块文件</p><p>　　        b、编译成位码（需要时）</p><p>　　        c、执行模块的代码来创建其所定义的对象</p><p>源代码文件b.py     字节码文件b.pyc</p><p>a.搜索</p><p>b、编译（可选）</p><p>遍历模块搜索路径，找到符合import语句的源代码文件后，如果有必要的话，Python接下来会将其编译成字节码。</p><p>Python会检查文件的时间戳，如果发现字节码文件比源代码文件旧（例如，如果你修改过源文件），就会在程序运行时自动重新生成字节代码。否则，就会跳过源代码到字节码的编译步骤。</p><p>c、运行</p><p>import操作的最后步骤是执行模块的字节码。文件中所有语句会依次执行，从头到尾，而此步骤中任何对变量名的赋值运算，都会产生所得到的模块文件的属性。因此，这个执行步骤会生成模块代码所定义的所有工具。例如，文件中的def语句会在导入时执行，来创建函数，并将模块内的属性赋值给那些函数。之后，函数就能被程序中这个文件的导入者来调用。</p><h3><span id="锻炼">锻炼</span></h3><p>Python导入模块的搜索路径。sys.path由如下几个部分组成：</p><p>1）程序的主目录；(当前的脚本目录)</p><p>2）PYTHONPATH环境变量配置的目录；</p><p>3）标准库目录；</p><p>4）.pth文件目录；</p><p>基于以上4点,所以我们对应的导入模块的设置的路径方式的原理就有4种.但其实实际上应用得原理只有2种,就是2),4).大家可以自己去思考原因.</p><p><a href="https://blog.csdn.net/liang19890820/article/details/76219560" target="_blank" rel="noopener">推荐大家看这篇博客</a></p><p>这篇博客介绍了基于上面原理的三种办法,两种永久的,一种暂时的.</p><h2><span id="循环导入">循环导入</span></h2><p>一、导入循环</p><p>在大型的Python工程中，由于架构设计不当，可能会出现模块间相互引用的情况。</p><h3><span id="1重新设计架构解除相互引用的关系">1.重新设计架构，解除相互引用的关系</span></h3><p>没找到例子,本人也是小白,不懂.如果有热心大侠,麻烦发个链接给我,我好加上去组成一个完善的信息节点.</p><h3><span id="2把import语句放置在模块的最后">2.把import语句放置在模块的最后</span></h3><p>没找到例子,本人也是小白,不懂.如果有热心大侠,麻烦发个链接给我,我好加上去组成一个完善的信息节点.</p><h3><span id="3把import语句放置在函数中">3.把import语句放置在函数中</span></h3><p><a href="https://blog.csdn.net/u010318270/article/details/71171228" target="_blank" rel="noopener">这是将import语句放置在函数中的讲解</a></p><p>其实里面利用到的原理就是当导入一个模块之后,也就是热身阶段的<a href="https://www.cnblogs.com/wooya/p/6495222.html" target="_blank" rel="noopener">Python模块的认识</a>第三步,执行模块的代码来创建其所定义的对象,第一次使用import语句会创建一个命名空间,control.py模块一开始需要创建一个命名空间,就需要导入submodule.py模块,而submodule.py模块一开始也需要创建一个命名空间,也需要导入control.py模块.就这样两个导入语句开始菜鸡互啄,第一次使用的import导入语句永远也没有走到尽头.把一个import导入语句放入函数中,其实就是停止了一个导入语句的菜鸡互啄,使互啄语句有了尽头.</p><h2><span id="和is">==和is</span></h2><p>Python中对象包含的三个基本要素，分别是：id(身份标识)、python type()(数据类型)和value(值)。is和==都是对对象进行比较判断作用的，但对对象比较判断的内容并不相同</p><p>== 是比较对象值是否相同</p><p>is 是比较两者是不是同一个对象,也就是比较两者的地址是不是相同.</p><h2><span id="深拷贝和浅拷贝">深拷贝和浅拷贝</span></h2><p><a href="http://python.jobbole.com/82294/" target="_blank" rel="noopener">深拷贝和浅拷贝</a>,讲得特别好,有图像,有解释,还有深拷贝和浅拷贝会应用哪些场景.</p><p>其实说白了 深拷贝就是再创建一个地址,去创建一个具有与原对象一样值的一个对象 ,而浅拷贝就是对原对象的一个引用.原对象值改变,引用对象值也改变,引用对象值改变,原对象值也改变,因为引用对象和原对象指向的地址是同一个地址.</p><p>当然还需要弄明白一点的就是可变类型和不可变类型了.</p><p>可变数据类型：列表list和字典dict,集合set；不可变数据类型：整型int、浮点型float、字符串型string和元组tuple  原子类型指得应该就是不可变数据类型.</p><p>不可变类型数据改变值可是要重新去创建一个新地址,去存储新的值的.</p><h2><span id="类的数据隐藏私有化">类的数据隐藏(私有化)</span></h2><p><a href="https://www.cnblogs.com/starsea/p/5429222.html" target="_blank" rel="noopener">简单版本的介绍</a>,介绍的比较简单,但是配上代码之后,就特别容易明白了.且介绍了特别多的名词概念</p><p><strong>foo</strong>: 定义的是特殊方法，一般是系统定义名字 ，类似 <strong>init</strong>() 之类的。</p><p>_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *</p><p>__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</p><h2><span id="property用法">property用法</span></h2><p><a href="https://docs.python.org/release/2.6/library/functions.html#property" target="_blank" rel="noopener">官方文档</a> 对property的介绍.</p><p><a href="http://python.jobbole.com/80955/" target="_blank" rel="noopener">网友写的简易教程</a>挺不错的至少我看懂了,不过应该要把下面的补充阅读都看了,才能完整的明白.</p><p>属性装饰器,这名字感觉起得挺有意思的,将一个类内部的类函数包装成一个类的属性,挺有意思的.</p><p>property(fget=None, fset=None, fdel=None, doc=None)</p><p>最后就留一个这个属性装饰器的方法吧,不过从这个方法来看,属性装饰器只能包含三种对属性的操作,读取,修改,删除.doc是docstring,用help()方法的时候,可以看到这个docstring,其实这里面就是包含了作者对这个属性的说明,如果没有设置的话,就读取fget内的docstring.</p><h2><span id="进制和位运算">进制和位运算</span></h2><p>Python中的与或非,左移右移与c语言的操作一样.然后进制啥的,没什么好讲的.<br>不过一些位运算的设计确实很骚皮,甚至你都会用神奇两个字来形容,看完之后,只能佩服这些写出来的人.以后我会装门写一篇关于位运算操作的博客.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python学习&quot;&gt;&lt;a href=&quot;#Python学习&quot; class=&quot;headerlink&quot; title=&quot;Python学习&quot;&gt;&lt;/a&gt;Python学习&lt;/h1&gt;&lt;p&gt;结束了Pygame的学习,紧接着学习的Python视屏当中有6个静音了,所以就得自己写下学习的步骤了.┭┮﹏┭┮&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Pygame_Surfarry 有意思的像素数组</title>
    <link href="http://yoursite.com/2018/04/12/Pygame-Surfarry-%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%83%8F%E7%B4%A0%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2018/04/12/Pygame-Surfarry-有意思的像素数组/</id>
    <published>2018-04-12T14:30:01.000Z</published>
    <updated>2018-04-12T16:29:02.441Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="有意思的像素数组">有意思的像素数组</span></h1><h2><span id="预言">预言</span></h2><p>按照pygame的教程走,上一篇博客我们看完了Python_chimp的小游戏代码,现在我们继续往下看,其实第一个小游戏还挺有意思的,如果你下载了Pygame模块的话,可以直接在Pygame文件夹中找到该示例程序,还有程序所需要的图片,声音.但是我觉得小游戏唯一不好的就是没有计分模块,当然这个也很简单,用front类,每击中一次,加一分,没击中扣一分,然后粘贴显示就可以了,有兴趣的可以自己额外拓展下<br><a id="more"></a></p><h2><span id="sprite-module-introduction">Sprite Module Introduction</span></h2><p>这是黑猩猩游戏的下一教学模块,里面介绍了Sprite类和Group类,碰撞检测,渲染组的基本知识,但是并没有觉得有很重要的东西,因为介绍Sprite类,Group类之类的,感觉看源码理解得更深一点,而方法则属于哪里不会查哪里的那种了,只要有想法,去查下方法就好了.所以我这里就不在多做介绍了.</p><h2><span id="surfarray-introduction">Surfarray Introduction</span></h2><p>这个教学模块是我觉得最有意思的地方了,因为这里介绍了如何应用NumPy里的数组去存储像素信息,并如何通过数组操作去改变它.这个让我很兴奋,虽然我也不知道为什么,但是确实我很高兴,可能是用了数学化的方式去改变了生活中的模拟信号,只能说学了那么多年的数学,终于感觉到它大概是怎么用的,且在感受它的时候,能感受到前辈的智慧,真得特别舒服!</p><h3><span id="数组操作">数组操作</span></h3><p>废话不多说,现在开始介绍!</p><p>在说明如何改变一张图片的像素信息的时候,我们首先要明白数组的各种操作.</p><p>直接上代码</p><pre><code>import numpy as Nstriped=N.array(N.zeros((128, 128,3)))striped.shape</code></pre><p>创建一个三维的zeros数组,而shape方法可以返回该数组维度对应的大小 如:a.shape –&gt; (128,128,3)</p><pre><code>striped[:] = (255, 0, 0)striped[:,::3] = (0, 255, 255)</code></pre><p>[第一维度,第二维度,第三维度]</p><p>[] 中只有一个”:”  表示该数组的最后一个维度,第一句话即将该数组的最后一个维度赋值(255,0,0)</p><p>start:end:step</p><p>[:,::3] 第一维度全选,第二维度选索引从0开始,步长为3的元素,第三维度没写即全选</p><p>嘴比较笨 就是 第二维度 选中的索引为 0  3  6  9  ……..</p><p>如果是 [:,3::]   第二维度选中的索引就是 从3开始,到末尾的元素  选中的索引为  3 4 5 6 7 8 9 ………</p><p>如果是 [:,3::3]  第二维度选中的索引就是 从3开始到末尾 步长为3 的元素 选中的索引为 3 6 9 12 15 ………</p><p>而如果[:,::-1]  则是第二维度的元素排列的顺序 反过来</p><p>如: 原来 : 0 1 2 3 4 5 6 7 9  —–&gt; 改变 :9 8 7 6 5 4 3 2 1 0</p><p>明白上面即可以开始看像素数组的魔法变化了!</p><h3><span id="像素数组的变化">像素数组的变化</span></h3><p>有点类似ps了,挺有意思的!这和之前pygame移动图像的原理有点类似,都是数组操作,但是移动图像属于那种加入第三方变量,临时保存需要移动图像的数据,临时保存完好,背景数组开始还原到原来的数据,然后再把第三方变量的数据贴到背景数组上合成一张移动图像后的数据数组.但是这里要介绍到的像素数组ps就有一点是一个人给自己做手术的感觉.</p><p>下面也直接上代码</p><h4><span id="反转">反转</span></h4><pre><code>flipped = rgbarray[:,::-1]#只有第二维度的顺序颠倒了,相当于就是y轴上的顺序倒了个,所以导致图像垂直反转surfdemo_show(flipped, &apos;flipped&apos;)flipped = rgbarray[::-1,:]#水平反转surfdemo_show(flipped, &apos;flipped&apos;)</code></pre><h4><span id="缩小">缩小</span></h4><pre><code>scaledown = rgbarray[::2,::2]#只取两个维度一半的信息,其实图片的信息是丢失了,所以呀放大缩小图片是失真的哈哈!surfdemo_show(scaledown, &apos;scaledown&apos;)</code></pre><p>但是Pygame的Surfarry类的对象使用放大缩小的方法的时候,会首先创建一个原来的图片的初始信息,只有当你真正完成对图片的全部操作后,才会由Python的机制自动释放掉此内存,虽说这样确实挺不错的,但是却有影藏的危机,比如如果你的图片信息特别大呢?那我们岂不是要占用很大的内存,去维持这么一个可能用不到的东西,所以Pygame又对这种情况,提供了一些其他的方法去调用,这里不介绍,大家可以自己去查看<a href="https://www.pygame.org/docs/" target="_blank" rel="noopener">Pygame官方文档</a></p><h4><span id="放大">放大</span></h4><pre><code>shape = rgbarray.shapescaleup = N.zeros((shape[0]*2, shape[1]*2, shape[2]))#先构建好一个空的框架scaleup[::2,::2,:] = rgbarray#在保持二维度一半的条件下,先填框架一维度的一半(1/4)scaleup[1::2,::2,:] = rgbarray#在保持二维度一半的条件下,再填框架一维度的一半(1/4)scaleup[:,1::2] = scaleup[:,::2]#这时再填二维度的一半(1/2)surfdemo_show(scaleup, &apos;scaleup&apos;)</code></pre><p>这段代码真是巧妙!在我明白像素数组操作的时候,我曾经构想过这个放大方法的实现办法,但是想了一会,确实没有什么好的想法.于是我是怀着无奈憧憬的心情去读的.</p><h4><span id="红色通道">红色通道</span></h4><pre><code>redimg = N.array(rgbarray)redimg[:,:,1:] = 0 #将第三维度的索引为1,2的填为0  (n,0,0)surfdemo_show(redimg, &apos;redimg&apos;)</code></pre><p>有点类似黑白报纸,不过这里应该是红黑报纸了  哈哈^_^</p><h4><span id="软化图像">软化图像</span></h4><pre><code>factor = N.array((8,), N.int32)soften = N.array(rgbarray, N.int32)soften[1:,:]  += rgbarray[:-1,:] * factorsoften[:-1,:] += rgbarray[1:,:] * factorsoften[:,1:]  += rgbarray[:,:-1] * factorsoften[:,:-1] += rgbarray[:,1:] * factorsoften //= 33surfdemo_show(soften, &apos;soften&apos;)</code></pre><p>数学真得很奇妙,虽然也带了一个数组,进去观察.但是发现得只是所有的像素点的RGB值都改变了,不是很能直观看得出软化了,甚至我都有点不相信这是同一张图片o(╥﹏╥)o,但是打印的图片确实还是原来的那张,数学真是奇妙!虽然有些像素点的RGB值错开来计算了,但是中间的像素值却是*64//32 这样还能使图像大致一样,真是有意思!</p><h4><span id="交叉淡化">交叉淡化</span></h4><pre><code>src = N.array(rgbarray)dest = N.zeros(rgbarray.shape)dest[:] = 20, 50, 100diff = (dest - src) * 0.50xfade = src + diff.astype(N.uint)surfdemo_show(xfade, &apos;xfade&apos;)</code></pre><p>完全是数学的线性计算好吧,没想到ps中的线性变化,真得是像素值做了线性的计算O(∩_∩)O哈哈~ 挺有意思的!</p><h2><span id="camera-module-introduction">Camera Module Introduction</span></h2><p>按照教程给的代码,会执行报错!准确的来说应该是Pygame的camera模块内还要引用一些我没有安装的模块,但是我上网搜了许久,并没有发现什么答案,看了源码,也不太明白到底是哪个模块.ε=(´ο｀<em>)))唉 不过上网找解决方案的时候,发现从cv2模块也是可以使用本地摄像头的,所以我也就没有太在意!所以说,就这样吧!继续往下走下去,以后用到了,再说嘿嘿(</em>^▽^*)!不过若是有好心的大侠,能告诉小虾米的话,那真是不胜感激!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;有意思的像素数组&quot;&gt;&lt;a href=&quot;#有意思的像素数组&quot; class=&quot;headerlink&quot; title=&quot;有意思的像素数组&quot;&gt;&lt;/a&gt;有意思的像素数组&lt;/h1&gt;&lt;h2 id=&quot;预言&quot;&gt;&lt;a href=&quot;#预言&quot; class=&quot;headerlink&quot; title=&quot;预言&quot;&gt;&lt;/a&gt;预言&lt;/h2&gt;&lt;p&gt;按照pygame的教程走,上一篇博客我们看完了Python_chimp的小游戏代码,现在我们继续往下看,其实第一个小游戏还挺有意思的,如果你下载了Pygame模块的话,可以直接在Pygame文件夹中找到该示例程序,还有程序所需要的图片,声音.但是我觉得小游戏唯一不好的就是没有计分模块,当然这个也很简单,用front类,每击中一次,加一分,没击中扣一分,然后粘贴显示就可以了,有兴趣的可以自己额外拓展下&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Pygame_chimp</title>
    <link href="http://yoursite.com/2018/04/11/pygame-chimp/"/>
    <id>http://yoursite.com/2018/04/11/pygame-chimp/</id>
    <published>2018-04-11T07:00:00.000Z</published>
    <updated>2018-04-11T10:27:52.656Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="pygame-monkey-fever游戏代码阅读">Pygame Monkey Fever游戏代码阅读</span></h1><a id="more"></a><p>最近有一个任务就是学习pygame模块吧!打开<br><a href="http://www.pygame.org/docs/" target="_blank" rel="noopener">pygame文档</a>之后,发现竟然有官方教程.于是自己就开始学了.下面的代码是官方教程第一个例子Monkey Fever游戏代码.自己加了注释和自己的理解,如果有理解不到位的,希望指出.</p><p><a href="https://github.com/HkThinker/Python/blob/Py_chimp/Line%20By%20Line%20Chimp.py" target="_blank" rel="noopener">Monkey Fever游戏代码</a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=32083133&auto=1&height=32"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Pygame-Monkey-Fever游戏代码阅读&quot;&gt;&lt;a href=&quot;#Pygame-Monkey-Fever游戏代码阅读&quot; class=&quot;headerlink&quot; title=&quot;Pygame Monkey Fever游戏代码阅读&quot;&gt;&lt;/a&gt;Pygame Monkey Fever游戏代码阅读&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>恋爱先生</title>
    <link href="http://yoursite.com/2018/03/03/%E6%81%8B%E7%88%B1%E5%85%88%E7%94%9F/"/>
    <id>http://yoursite.com/2018/03/03/恋爱先生/</id>
    <published>2018-03-02T16:00:37.000Z</published>
    <updated>2018-04-05T04:36:34.165Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="http://p3d5coiof.bkt.clouddn.com/%E6%81%8B%E7%88%B1%E5%85%88%E7%94%9F.jpg" alt="恋爱先生" title="虚伪喜欢躲藏在最高尚的思考之中。它从来企图脱离思考，因为思考能使它不费吹灰之力就获得高尚的美名。 ——埃德蒙伯克"></p><h1><span id="恋爱先生">恋爱先生</span></h1><h2><span id="配角">配角</span></h2><!-- more --><p>有时候</p><p>我喜欢配角的心情</p><p>比喜欢主角的心情多一点</p><p>为什么呢?</p><p>按道理,主角不应该比配角更光鲜亮丽吗?</p><p>有更多的曝光时间,和美化吗?</p><p>小时候  是挺喜欢主角的   </p><p>有时候会把配角的戏  跳了 专门看主角的戏</p><p>现在想一想  说句心里话</p><p>我反而有点不怎么追捧主角了</p><p>相反更喜欢那些个性化突出的配角</p><p>而不是那种什么都好的一个完美的主角形象</p><p>恋爱先生的乔依琳 是我少有得喜欢配角的程度超过主角的人物</p><p>她的眼睛  她的服装   她的行为都在诉说着一个故事</p><p>我查了演员资料  </p><p>她韩国练习生和演员的经历 </p><p>可能是使她演得特别给人不一样的感觉</p><p>是什么感觉呢?</p><p>是烧焦的千页豆腐的味道</p><p>是一种清新但又奇怪艳丽的美</p><p>她的眼睛大又明亮</p><p>会说话  </p><p>有我一直在缥缈中寻找的味道,</p><h1><span id="虚伪-逃避">虚伪 逃避</span></h1><p>看完整个电视剧</p><p>我一直在审视心中的虚伪感</p><p>问题产生</p><p>但我逃避</p><p>紧接着为了追求光鲜艳丽的外在</p><p>而虚伪</p><p>紧接着就是撒谎</p><p>用这个谎圆上一个谎  </p><p>就这样经历多次</p><p>逃避,虚伪成为了习惯</p><p>深入骨髓,潜意识</p><p>让我有时候莫名其妙得就犯了错</p><p>现在想一想  </p><p>要避免这种情况的发生</p><p>就要抛开感性的思维</p><p>用客观理性的思维去思考  </p><p>什么有利 </p><p>什么有弊</p><p>而不是去拒绝</p><p>把客观的机会</p><p>记录下来</p><p>如果拒绝的话  </p><p>要写下拒绝的原因</p><p>不拒绝的话 </p><p>就应该需要去做</p><iframe src="http://cn.sudokupuzzle.org/online.php" frameborder="0" width="425" scrolling="no" style="height:485px !important;height:475px;"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=406238&auto=1&height=32"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://p3d5coiof.bkt.clouddn.com/%E6%81%8B%E7%88%B1%E5%85%88%E7%94%9F.jpg&quot; alt=&quot;恋爱先生&quot; title=&quot;虚伪喜欢躲藏在最高尚的思考之中。
      
    
    </summary>
    
      <category term="生活杂事" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>17寒假反省</title>
    <link href="http://yoursite.com/2018/02/03/17%E5%AF%92%E5%81%87%E5%8F%8D%E7%9C%81/"/>
    <id>http://yoursite.com/2018/02/03/17寒假反省/</id>
    <published>2018-02-03T14:49:39.000Z</published>
    <updated>2018-04-05T04:36:36.049Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="http://p3d5coiof.bkt.clouddn.com/%E5%A6%96%E7%B2%BE%E7%9A%84%E5%B0%BE%E5%B7%B4.jpg" alt="Alt text" title="相当多的人对认识事实缺乏兴趣。有的人过了青春期，就放弃了绘制地图。他们原有的地图窄小、模糊、粗略，对世界的认识狭隘而偏激。大多数人过了中年，就自认为地图完美无缺，世界观没有任何瑕疵，甚至自以为神圣不可侵犯，对于新的信息和资讯，他们也没有多少兴趣，似已疲惫不堪。只有极少数幸运者能继续努力，他们不停地探索、扩大和更新自己对于世界的认识，直到生命终结。"></p><h1><span id="17寒假反省">17寒假反省</span></h1><p>15天因为办补习班的事情,弄得有些疲劳.可能我把事情整体化看了,还是应该每天写计划,细碎化的生活着,整体得看确实好累呀!再想一想自己的数字电路还没有看有些小着急,寒假都还没有真正利用一点时间去学一些对专业有用的知识.也没有看完一两本有趣的书,确实有点小累.可能每天回来的时候,确实需要跑步回来,释放一点压力.后面的同学之间得聚会还是少去或者说不去为好,待在家里,看看书,充充电,应该是我需要做的.</p><p>家里没有殷实的财富,许多事情还得是靠自己,要跨越阶级,还是得需要一门过硬的技能,毕竟对于我这种社会底层的人,没有财富,没有强大的人脉,靠自己也只能有一门过硬的技能,让需要的我帮忙的人,靠近我.让我见识社会不同阶级的人.从现在开始,做好计划,边帮人补习,边使自己强大.</p><p>补习班的事情,若要长久还是得需要一个长久的场地,而河口的场地,我认为以现在河口的市场价格,25万到27万之间可能可以拿下一套,适合我们办教学的商品房.但是很明显目前我和坤完全没有这个实力,幸好下个暑假的房子,已经找到,可能能拖多久就多久吧,现在没有办法,或许以后就有办法! </p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=857896&auto=1&height=32"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://p3d5coiof.bkt.clouddn.com/%E5%A6%96%E7%B2%BE%E7%9A%84%E5%B0%BE%E5%B7%B4.jpg&quot; alt=&quot;Alt text&quot; title=&quot;相当多
      
    
    </summary>
    
      <category term="17寒假" scheme="http://yoursite.com/categories/17%E5%AF%92%E5%81%87/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO+Github创建个人独立博客</title>
    <link href="http://yoursite.com/2018/01/29/HEXO-Github%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/01/29/HEXO-Github创建个人独立博客/</id>
    <published>2018-01-28T16:15:54.000Z</published>
    <updated>2018-04-05T04:10:40.201Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3d5coiof.bkt.clouddn.com/a84db4b0f539b62a51f5b7664d5b494e2ddc1a1f10ec2-8kZXzH_fw658.jpg" alt="Alt text" title="或许魔术是骗人的,但是看魔术的人,喜欢被人骗."></p><p> 创建博客的想法,我很早就有了.只是一直没有行动起来,这次恰逢碰到寒假,花了大概一个星期左右的时间,终于建好了.说实话,我对现在的界面还是有些不满意的,但是我花了很长的时间没有弄清楚问题源头在那,再看寒假已经过去四分之一了,很心疼,只能先放下,往前走了.开这一篇博文,算是对自己这几天学习的知识做个总结,也欢迎大家和我分享你们创建博客的过程中所遇到的问题.</p><hr><h1><span id="前言">前言</span></h1><ul><li><strong>为什么选择Hexo和GitHub Pages?</strong></li><li><strong>创建初级博客页面</strong></li><li><strong>编写博客内容</strong></li><li><strong>博客页面进阶设置</strong></li><li><strong>官方参考文档</strong></li><li><strong>博主感想</strong></li></ul><a id="more"></a><p>(原谅我比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 )</p><hr><h1><span id="为什么选择hexo和github">为什么选择Hexo和GitHub?</span></h1><ul><li><ul><li>Hexo 是一个快速、简洁且高效的博客框架。虽然搭建的过程有些繁琐,但是搭建完成,写完成是极简单,极舒服的.</li></ul></li><li><ul><li>GitHub Pages 有 300M 免费空间，资料自己管理，保存可靠</li><li>学着用 GitHub，享受 GitHub 的便利，上面有很多大牛，眼界会开阔很多</li><li>顺便看看 GitHub 工作原理，最好的团队协作流程</li><li>GitHub 是趋势</li></ul></li><li><ul><li>好吧(╯▽╰),我承认上面都是大神讲的,我只是对GitHub很感兴趣,全球最大的代码开源社区之一,非常想了解这个的运作流程.再加上网上对于这个组合评价较高所以就选了 </li></ul></li></ul><hr><h1><span id="创建初级博客页面">创建初级博客页面</span></h1><h2><span id="一购买域名">一:购买域名</span></h2><p>我买域名的地方是<a href="https://www.godaddy.com/" target="_blank" rel="noopener">GoDaddy</a>,当初学习的教程是推荐GoDaddyde,但是我建议大家去<a href="https://wanwang.aliyun.com/?utm_content=se_980922&amp;gclid=EAIaIQobChMI3Irjzar92AIVWQUqCh0_rQHjEAAYASAAEgJKMvD_BwE" target="_blank" rel="noopener">万网</a>买</p><p>万网是阿里云旗下品牌,我想这个技术方面比外国是不会差到哪里去的,既然技术不会怎么差,干嘛不支持下国产的.</p><p><img src="http://p3d5coiof.bkt.clouddn.com/psb.png" alt="Alt text"></p><p>点击价格总览,可以事先查看下大概所有域名的价格.</p><hr><h2><span id="二在hexo生成blog">二:在hexo生成blog</span></h2><ul><li><strong>安装Node</strong><br>  到<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>官网下载相应平台的最新版本，一路安装即可。</li><li><p><strong>安装Git</strong><br>  到<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>官网下载相应平台的最新版本</p></li><li><p>考虑到你可能是电脑小白,所以博主也帮你们准备好了福利哟(＾Ｕ＾)ノ~ＹＯ</p><ul><li><a href="https://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html" target="_blank" rel="noopener">windows安装git</a> </li><li><a href="https://jingyan.baidu.com/article/b0b63dbfca599a4a483070a5.html" target="_blank" rel="noopener">windows安装node.js</a></li></ul></li><li><strong>安装hexo</strong></li></ul><p>1.创建一个文件夹(文件名:博客  (可以自己随意取啦))</p><p>2.在博客文件里,空白处点击鼠标右键 选择Git Brush here</p><p>3.执行下面代码,安装hexo:</p><pre><code>npm install -g hexo</code></pre><ul><li><strong>初始化框架</strong></li></ul><p>1.在刚才创建博客文件里,再次Git Brush here,执行如下语句:</p><pre><code>hexo init blogcd blognpm install</code></pre><p>你可以不用理会它弹出的信息,一口气把上面三条指令打完.<br>2.检查核对blog文件夹内的信息:</p><pre><code>├── _config.yml //网站的配置信息，您可以在此配置大部分的参数。 ├── package.json ├── scaffolds //模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 ── source //资源文件夹是存放用户资源的地方。| ├── _drafts| └── _posts └── themes //主题文件夹。Hexo会根据主题来生成静态页面。</code></pre><ul><li><strong>看看自己创建的初级网站</strong></li></ul><p>在blog目录下执行gitbash命令:</p><p>1.新建一篇文章</p><pre><code>hexo new &quot;第一篇文章&quot;</code></pre><p>会在/source/_post里自动生成了“我的第一篇文章.md”文件，之后新建的文章都将存放在此目录下。编辑“我的第一篇文章.md”文件可修改内容。红线圈的地方修改内容.注意内容采用的语法是MarkDown的语法,可在后面编写博客内容那里有详细教程.</p><p><img src="http://p3d5coiof.bkt.clouddn.com/psb%20%284%29.jpg" alt="Alt text"></p><p>在/scaffolds/post.md 中是创建该文章的模板,设定了文章的头部属性</p><p>2.生成网站(生成静态页面)</p><pre><code>hexo generate(可简写 hexo g)</code></pre><p>3.启动服务器</p><pre><code>hexo server(可简写成 hexo s)</code></pre><p>如果在执行时遇到了 EADDRINUSE 错误,就换成5000端口</p><pre><code>hexo serve -p 5000</code></pre><p>4.在浏览器输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 既可以查看网站.</p><hr><h2><span id="注册github">注册github</span></h2><p><a href="https://github.com/" target="_blank" rel="noopener">github</a><br>注册成功后,重新登录,进入到这个界面</p><p>(我建议大家用<a href="https://www.google.cn/chrome/browser/desktop/index.html" target="_blank" rel="noopener">Google浏览器</a>,第一因为对于英文不好的人来说,比如就博主我吧,看到英文很头疼,就不想看,而Google浏览器自带了一打开页面就翻译的功能,很方便.第二使用Google浏览器感觉它比其他浏览器打开全英文的网站更快点.第三这个浏览器有很多很好用的插件)</p><p><img src="http://ww2.sinaimg.cn/large/005vGbJ7jw1f5md7zebr5j30wp0gnq5f.jpg" alt="Alt text"></p><p><strong>接下来进入—-&gt;</strong></p><p><img src="http://ww4.sinaimg.cn/large/005vGbJ7jw1f5mdn65brmj30ng0h0dh1.jpg" alt="Alt text"></p><p><strong>Repository name里填写:你的用户名.github.io(必须)</strong></p><p><img src="http://ww4.sinaimg.cn/large/005vGbJ7jw1f5mdofjeuij30pv0k9tab.jpg" alt="Alt text"></p><p>创建成功</p><p>配置SSH-Key</p><p><a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="noopener">详细步骤请点击此文章</a></p><hr><h2><span id="将blog部署到github-pages上">将blog部署到Github Pages上</span></h2><ul><li><strong>提前安装一个扩展</strong></li></ul><p>在bolg目录下 git brush</p><pre><code>npm install hexo-deployer-git --save</code></pre><ul><li><strong>配置deploy</strong></li></ul><p>找到blog目录下的配置文件_config.yml,用编辑器打开此文件<br>找到此文件中的deploy字段，按照以下配置,注意配置文件的 <strong>:</strong> 号后一定要打一个空格,否则会报错</p><pre><code>deploy: type: git repo: git@github.com:sunningcarryhaha/sunningcarryhaha.github.io.git   branch: master</code></pre><ul><li><strong>在Github Pages上显示网页</strong></li></ul><p>在bolg目录下 git brush</p><pre><code>hexo g</code></pre><p><strong>部署成功以后，在浏览器中输入你的repository名字,如name.github.io,就可以看到你的网站了</strong></p><hr><h2><span id="使自己的域名和github-pages挂钩">使自己的域名和Github Pages挂钩</span></h2><h3><span id="域名解析">域名解析</span></h3><ul><li><p>进入万网进行域名解析</p></li><li><p>进入public,新建CNAME</p></li><li><p>把域名写到CNAME里</p></li><li><p>传到github仓库里</p></li></ul><p><strong>1.进入万网进行域名解析</strong></p><p><img src="http://ww1.sinaimg.cn/large/005vGbJ7jw1f5fepmf432j31hb0jgthk.jpg" alt="Alt text"></p><p><img src="http://ww3.sinaimg.cn/large/005vGbJ7jw1f5fer7xepxj319r0d2gpx.jpg" alt="Alt text"></p><p>按照以上图片进行操作</p><p><strong>尤其注意:记录值那里填写的是:sunningcarryhaha.github.io.，也就是你的仓库名字后还有个”.” </strong></p><p><img src="http://ww4.sinaimg.cn/large/005vGbJ7jw1f5fe1tnb1pj30rt0h5q7d.jpg" alt="Alt text"></p><p><strong>2.在CNAME里面写上你的域名</strong></p><p><strong>3.在blog目录下,git brush</strong></p><pre><code>hexo d</code></pre><p>如果上传成功的话，进入到你的github仓库中会看到CNAME文件</p><p><img src="http://ww3.sinaimg.cn/large/005vGbJ7jw1f5ff5aey6gj30sj0ndn3i.jpg" alt="Alt text"></p><hr><h2><span id="初级博客搭建完成">初级博客搭建完成</span></h2><p>如果以上步骤都进行完毕的话，博主恭喜你,现在在浏览器输入你的域名，就可以成功的看到你的个人网站啦！</p><hr><h1><span id="编写博客内容">编写博客内容</span></h1><p><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/2.html" target="_blank" rel="noopener">Markdown的简明语法</a>虽然官网上也有,但是我看过,觉得没有这个讲的清楚明白.<br>弄懂语法之后,可以选择在线编译器或者离线编译器</p><p>在线编译器有很多 我建议<a href="https://dillinger.io/" target="_blank" rel="noopener">DILLINGER</a></p><p>离线编译器,我建议<a href="http://www.downza.cn/soft/193071.html" target="_blank" rel="noopener">MarkWord</a></p><p>在编译器上写好了之后,可以将写好的内容全部复制,放在 /source/_post <strong>我的第一篇文章.md</strong> 下</p><p>然后执行下面两条命令</p><pre><code>hexo ghexo d</code></pre><p>再在浏览器上打开自己的博客域名,便可以看到更新好的文章.</p><h2><span id="图片的存放">图片的存放</span></h2><p>图片两种储存方法:</p><p><strong>第一种:直接放在本地的/blog\themes\next\source\images 里面</strong></p><p>但是这种方法并不好,因为Github里的免费储存空间不大,放图片自然很不现实</p><p><strong>第二种:就是存放在一些图云里了</strong></p><p>我用的是<a href="https://portal.qiniu.com/signup?code=3lacsu50iv61e" target="_blank" rel="noopener">七牛云</a></p><p>最主要是免费吧 然后空间也比较大.</p><p>有些人刚刚拿到的用的时候可能有点懵,像我一样,但是<a href="https://portal.qiniu.com/signup?code=3lacsu50iv61e" target="_blank" rel="noopener">七牛云</a>的官网也提供了教程,是命令行的,看到这,不经感叹,伤不起!于是我上网搜了一下,发现Google浏览器可以下载<a href="https://link.jianshu.com/?t=https://chrome.google.com/webstore/detail/qiniu-upload-files/emmfkgdgapbjphdolealbojmcmnphdcc" target="_blank" rel="noopener">qiniu-upload</a>插件.打开插件</p><p><strong>设置配置的参数</strong></p><p>假设 我的ACCESSKEY 是:HKxyw</p><p>   .   我的密钥是: HKxyw<br>   我的存储库的名字是: blog  (存储库的名字就是你在七牛上设置的存储库)</p><p><img src="http://p3d5coiof.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720180130232332.png" alt="Alt text"></p><p>设置好之后,将需要上传的图片移动至插件上就可以了</p><p><img src="http://p3d5coiof.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720180130232308.png" alt="Alt text"></p><p>查看图片的外链的时候,就打开七牛云的存储库,查看所用图片的外链,复制粘贴即可.</p><p>博主说实话,有点小累.如果有人找到更好的办法,麻烦也推荐推荐我.</p><hr><h1><span id="博客页面进阶设置">博客页面进阶设置</span></h1><p>对于电脑小白,博主友情提醒Ctrl+f快速查找,这个快捷键,在后面修改配置文件的时候很有用.</p><h2><span id="官方的初级教程">官方的初级教程</span></h2><p>首先肯定是换主题了,去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">HEXO主题</a>下选一个主题</p><p>假设我选择了<a href="http://www.imoly.club/" target="_blank" rel="noopener">Aero-dual主题</a> </p><p><img src="http://p3d5coiof.bkt.clouddn.com/psb%20%283%29.jpg" alt="Alt text"></p><p>点击之后将会进入下面界面,在README.md文件中就有教你使用这个主题的办法.有些主题是没有的则要自己去摸索一番</p><p>更换主题的命令:</p><pre><code>git clone (下图中复制的地址) thems/(主题名)</code></pre><p>解释下这个就是将该地址下的文件复制到我们本地 /blog/thems 下的新创建的文件中,文件名为命令中设置的主题名</p><p><img src="http://p3d5coiof.bkt.clouddn.com/psb%20%281%29.jpg" alt="Alt text"></p><h2><span id="next的官方主题教程">NEXT的官方主题教程</span></h2><p>博主选得是NEXT主题,第一界面真得挺好看的,且网上相关的教程很多.第二虽然NEXT的哲学精神是简单,但是说实话设置的时候是真不简单,相对于其他的主题设置的话,应该能学到很多东西.所以我就选择了NEXT主题,下面我就说一说吧</p><p>第一我建议大家再看别的博主的进阶页面设置的时候,先把<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">官方的初级教程看一遍</a>,因为基本功能还是官方写的详细,我之前之所以走了很多弯路,就是杂七杂八的看,错的莫名其妙的.</p><p>第二我建议大家每实现一个功能,就都核对一下是否成功了,别一下子全部弄好,有错误都不知道错了哪里.(我就是这样不知道那错了,导致后面的功能实现不了)因为有些博主写的教程时间太久了,对于现在的版本有些不适用.</p><p>调试的时候也很方便,运行下列命令</p><pre><code>hexo  s</code></pre><p>打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 记得不要将你的git bash 的黑盒子关了,就放在那里.然后实现一个功能,就刷新下浏览器,就可以看到你改变之后的变化了,如果没有,就可能是出问题了.</p><p>当你认为功能设置好之后,再按住<strong>Ctrl+c</strong>退出服务器调试的过程,再执行下列命令</p><pre><code>hexo d</code></pre><p>打开浏览器,登录自己的域名,就可以看到自己博客上的变化了 完成官方的初级教程.博客页面也就算过得去了.如果喜欢花里胡哨的小朋友,请继续看下面的进阶教程.</p><p><strong>对于官方主题教程的我就想提醒两点</strong></p><p><strong>1.设置菜单的图标的时候:</strong></p><p><img src="http://p3d5coiof.bkt.clouddn.com/psb.jpg" alt="Alt text"></p><p><a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">Font Awesome</a>是这个网站,而后面的 th 则是网站提供的图标的名字</p><p><strong>2.配置文件里面的 :  号后面要打一个空格</strong></p><h2><span id="各方大神的next进阶教程">各方大神的NEXT进阶教程</span></h2><p>官方的教程还是处于那种调用功能模块化的阶段,就是已有的功能进行一种调用吧,而大神则是之间改里面的代码了,各种花操作,很炫.</p><p><a href="http://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">hexo主题个性化设置</a></p><p>上面那面一篇就是个性化的设置很全基本上囊括了我所看到的.</p><p><a href="http://blog.csdn.net/MasterAnt_D/article/details/56839222#t50" target="_blank" rel="noopener">hexo搜素引擎优化</a></p><p>这一篇就是其中的搜索引擎优化写得很详细.</p><h1><span id="参考文档">参考文档</span></h1><p>由于有些同学可能会像我一样,有一种强迫症,不把看不懂的东西看明白的话,很难受,没有读下去的欲望.所以给大家几个文档.我们这里用了Git,HEXO(搭建官方基础教程的时候,懂这些完全够用),我推荐<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰老师的Git简易教程</a>和<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">HEXO的官方文档</a>.然后后面的NEXT主题进阶设置,则是插入不同的代码,是前端的知识,我没有看懂,就是看了<a href="http://www.w3school.com.cn/html/index.asp" target="_blank" rel="noopener">html教程</a>,这个大概能弄懂一点.</p><p>这是我自己做的关于<a href="https://pan.baidu.com/s/1nwDHffV" target="_blank" rel="noopener">Git笔记</a>,用x-mind做的,如果想看的话,点击链接下载看就好了</p><p>后面的两个就没有做了(因为做第一个总结的时候,花了大概5,6个小时o(╥﹏╥)o)</p><p>后面就怕了 O(∩_∩)O哈哈~</p><p>列举下本文所参考过的文档(当然学的时候看得更多,感谢网上的诸多大神的分享)</p><p><a href="http://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">hexo主题个性化设置</a></p><p><a href="http://blog.csdn.net/MasterAnt_D/article/details/56839222#t50" target="_blank" rel="noopener">hexo搜素引擎优化</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰老师的Git简易教程</a></p><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">HEXO的官方文档</a></p><p><a href="http://www.w3school.com.cn/html/index.asp" target="_blank" rel="noopener">html教程</a></p><p><a href="https://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html" target="_blank" rel="noopener">windows安装git</a> </p><p><a href="https://jingyan.baidu.com/article/b0b63dbfca599a4a483070a5.html" target="_blank" rel="noopener">windows安装node.js</a></p><p><a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="noopener">SSHkey配置</a></p><p><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/2.html" target="_blank" rel="noopener">Markdown的简明语法</a></p><h1><span id="博主感想">博主感想</span></h1><p>学到了很多,git的团队分工协作的思想很有意思,git里的版本思想我也是第一次接触即有用又有意思.然后,下次有时间的时候,再把这个界面美化下(先挖个坑吧,O(∩_∩)O哈哈~)</p><p><strong>哈哈(O(∩_∩)O哈哈~)</strong></p><p><strong>嘻嘻~((#^.^#))</strong></p><p><strong>嘎嘎~(&lt;{=．．．．(嘎~嘎~嘎~))</strong></p><p><strong>呲呲~(O(∩_∩)O呲呲~)</strong></p><p><strong>现在开启我的博客正式之旅!!!</strong></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=32083133&auto=1&height=32"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p3d5coiof.bkt.clouddn.com/a84db4b0f539b62a51f5b7664d5b494e2ddc1a1f10ec2-8kZXzH_fw658.jpg&quot; alt=&quot;Alt text&quot; title=&quot;或许魔术是骗人的,但是看魔术的人,喜欢被人骗.&quot;&gt;&lt;/p&gt;
&lt;p&gt; 创建博客的想法,我很早就有了.只是一直没有行动起来,这次恰逢碰到寒假,花了大概一个星期左右的时间,终于建好了.说实话,我对现在的界面还是有些不满意的,但是我花了很长的时间没有弄清楚问题源头在那,再看寒假已经过去四分之一了,很心疼,只能先放下,往前走了.开这一篇博文,算是对自己这几天学习的知识做个总结,也欢迎大家和我分享你们创建博客的过程中所遇到的问题.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;为什么选择Hexo和GitHub Pages?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建初级博客页面&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编写博客内容&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;博客页面进阶设置&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;官方参考文档&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;博主感想&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
</feed>
